git 용어

- Repository
저장소(Repository, Repo) ; 어떠한 프로젝트 관련 내용을 저장하는 공간
특정 Repository를 내려 받을 때(Clone)이 repository를 가리키는 URL이 필요, 맨 마지막 .git 확장자로 표현된다

- Branch
일종의 독립적인 작업공간
최초 Git 초기화시 기본적으로 "master"라는 브랜치가 생성된다

- git의 4가지 영역
    1) Working Directory (작업영역)
        실제 프로젝트 디렉토리
        실제 코드의 추가, 수정, 삭제가 이루어지는 영역'

    2) Repository (저장소)
        파일, 폴더를 변경 이력별로 저장해 두는 곳
        - Local Repository : 개인 PC에 파일이 저장되는 개인 저장소
        - Remote Repository : 원격 저장소 전용 서버에서 관리되며, 여러 사람들과 같이 공유도 가능한 저장소

    3) Index (staging Area)
        Working Directory에서 Repository로 정보 저장 전 준비 영역
        파일 상태를 기록 , 스테이징 한다고 표현
        .git/index 파일로 관리됨
        3-1) git add : Working Directory 에서 index영역으로 정보가 저장
        3-2) git commit : index 영역에서 Repository로 정보가 저장
    4) Stash
         위의 3가지 영역과 다른 별개의 임시 영역
         임시적으로 작업사항을 저장해두고 나중에 꺼내올 수 있음
=======================================================================
git을 설치하였다고 가정했을 때

! 로컬 디렉토리 하나를 선택하여 git 저장소를 적용하는 방식

1. git init
- 로컬 저장소로 사용할 폴더를 생성하여 해당 폴더로 이동
- 해당 폴더 우클릭 > git bash 실행 >"git init"  ->  .git 이라는 숨겨진 폴더가 생성

2. git status
- 파일 상태 확인 명령어
- 파일 상태 2가지
    1) Untracked 상태
        - '추적되지 않고 있는' 파일; 즉 파일을 생성한 후 한번도 add 하지 않은 상태
    2) Tracked 상태
        - 파일이 Git에 의해 그 변동사항이 추적되는 상태
            2-1) Staged 상태 : 파일 수정 후 staging area에 올라가 있는 상태
            2-2) Unmodified 상태 : 현재 파일이 최신 커밋 파일과 비교하여 바뀐게 없는 상태
            2-3) Modified 상태 : 현재 파일이 최신 커밋 파일과 비교하여 바뀐게 있는 상태

3. git add
- index에 파일 추가 하는 명령어
- 옵션 : -A, --all 변경된 모든 파일 추가

4. git rm
- --cached : index에 추가된 파일을 gtaging area에서 제외 (working directory의 파일은 유지)
- -f, --force : 삭제하려는 파일의 내용이 브랜치 끝 부분에서의 내용과 다를 경우 강제 삭제

5. git commit
- 변경사항 확정에 사용하는 명령어
    5-1) git commit -m "커밋 메세지"
        스테이징 영역의 파일들을 커밋
        -m 은 커밋메시지 옵션/ 여러 줄의 커밋메세지는 여러개의 -m 을 사용하여 처리 가능
    5-2) git commit -a : 자동으로 add 를 진행한 후 커밋 (한번도 add 되지 않은 파일은 add를 따로 작업해 줘야 한다)

6. git log
-git log : commit history확인

7. git reset
-과거 커밋으로 돌아가고 싶을 때 사용 (문법 : git reset [옵션] [커밋])
    7-1)git reset -직전의 add이전의 상태로 staging area를 되돌린다
    7-2)git reset --soft HEAD^
    7-3)git reset --hard 커미ID
        -특정 과거 커밋시점으로 working directory를 원상복구 한다

! 원격저장소를 만들어 활용하는 방식

1. github 에서 repository create
 (README.md 파일이란 : 저장소 페인페이지의 저장소 설명하는 파일, 해당 프로젝트에 대한 설명 및 실행방법 등을 적어 놓는 파일)

2. git Remote
    문법 :  git remote add < remote repo 이름> <repo url>
    - git remote : 추가한 원격 저장소의 목록 확인 (상세히 git remote -v)
    - git remote show 이름 : 특정 원격 저장소의 정보를 확인
    - git rempte rm 이름 : 원격저장소를 제거

3. git push
- 로컬 저장소에 commit 한 파일들을 원격 저장소에 추가하는 명령어
- git push [원격 저장소 이름(별명)] [브랜치명]

4. git pull
- git pull [원격 저장소 이름(별명)] [브랜치명]
    다른 사람들의 작업 변경사항을 클라이언트로 내려받기